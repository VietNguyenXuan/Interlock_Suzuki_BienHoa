<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibUsbDotNet</name>
    </assembly>
    <members>
        <member name="T:LibUsbDotNet.Usb.Main.UsbError">
            <summary>
            Error storage class containing information related to the current <see cref="T:LibUsbDotNet.Usb.Main.UsbError"/>.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.UsbError.Sender">
            <summary>
            The full object name that the error occured in.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.UsbError.FunctionName">
            <summary>
            The function in <see cref="F:LibUsbDotNet.Usb.Main.UsbError.Sender"/> that the error occured in.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.UsbError.ErrorCode">
            <summary>
            The negative result error code.
            </summary>
        </member>
        <member name="M:LibUsbDotNet.Usb.Main.UsbError.ToString">
            <summary>
            Gets a <see cref="T:System.String"/> representing this <see cref="T:LibUsbDotNet.Usb.Main.UsbError"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> representing this <see cref="T:LibUsbDotNet.Usb.Main.UsbError"/>.</returns>
        </member>
        <member name="T:LibUsbDotNet.Usb.UsbEndpointWriter">
            <summary>
            Main class used to send data to a USB device.
            </summary>
        </member>
        <member name="T:LibUsbDotNet.Usb.UsbEndpointBase">
            <summary>
            Base abstract class for endpoint IO operations.
            </summary>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbEndpointBase.CancelIO">
            <summary>
            Cancels any pending operation for this endpoint.
            </summary>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbEndpointBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbEndpointBase.Transfer(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads or Writes data (depending on the <see cref="P:LibUsbDotNet.Usb.UsbEndpointBase.EpNum"/>) to/from the current <see cref="T:LibUsbDotNet.Usb.UsbEndpointReader"/>.
            </summary>
            <param name="buffer">The buffer for the tranfer.</param>
            <param name="offset">The position in buffer to start storing the data.</param>
            <param name="count">The number of bytes to send or the maximum number of bytes to receive.</param>
            <param name="timeout">Maximum time to wait for the transfer to complete.  If the transfer times out, the IO operation will be cancelled.</param>
            <returns>
            Number of bytes transmitted or less than zero if an error occured.
            </returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbEndpointBase.cancelAsync_NL(LibUsbDotNet.Usb.Internal.TransferContext)">
            <summary>
            All functions that call this function must first lock the <see cref="F:LibUsbDotNet.Usb.UsbEndpointBase.oLockTransferContext"/> object to be thread safe.
            </summary>
            <param name="transferContext"></param>
            <returns></returns>
        </member>
        <member name="P:LibUsbDotNet.Usb.UsbEndpointBase.IsDisposed">
            <summary>
            True if this <see cref="T:LibUsbDotNet.Usb.UsbEndpointBase"/> has been disposed by the <see cref="M:LibUsbDotNet.Usb.UsbEndpointBase.Dispose"/> function.  If an endpoint is disposed it can no longer be used.
            <see cref="T:LibUsbDotNet.Usb.Main.ErrorCodes"/>.<see cref="F:LibUsbDotNet.Usb.Main.ErrorCodes.ENODEV"/> will be retuned if a function call is made to a disposed endpoint.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.UsbEndpointBase.EpNum">
            <summary>
            The endpoint number as a <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.UsbEndpointBase.EndpointType">
            <summary>
            The endpoint type of this <see cref="T:LibUsbDotNet.Usb.UsbEndpointBase"/> class.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.UsbEndpointBase.ISOPacketSize">
            <summary>
            Gets a value indicating the packet size used for Isochronous transfers.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.UsbEndpointWriter.DEF_WRITE_TIMEOUT">
            <summary>
            Default write mTimeout.
            </summary>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbEndpointWriter.Write(System.Byte[],System.Int32)">
            <summary>
            Writes data to the current <see cref="T:LibUsbDotNet.Usb.UsbEndpointWriter"/>.
            </summary>
            <param name="buffer">The buffer storing the data to write.</param>
            <param name="timeout">Maximum time to wait for the transfer to complete.  If the transfer times out, the IO operation will be cancelled.</param>
            <returns>
            Number of bytes transmitted or less than zero if an error occured.
            </returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbEndpointWriter.Write(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes data to the current <see cref="T:LibUsbDotNet.Usb.UsbEndpointWriter"/>.
            </summary>
            <param name="buffer">The buffer storing the data to write.</param>
            <param name="offset">The position in buffer to start writing the data from.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="timeout">Maximum time to wait for the transfer to complete.  If the transfer times out, the IO operation will be cancelled.</param>
            <returns>
            Number of bytes transmitted or less than zero if an error occured.
            </returns>
        </member>
        <member name="P:LibUsbDotNet.Usb.UsbEndpointWriter.EpNum">
            <summary>
            The endpoint number as a <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.UsbEndpointWriter.WriteEndpoint">
            <summary>
            The endpoint ID number that this instance is writing to.
            </summary>
        </member>
        <member name="T:LibUsbDotNet.Usb.UsbEndpointReader">
            <summary>
            Main class used to receive data from a USB device.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.UsbEndpointReader.DEF_READ_BUFFER_SIZE">
            <summary>
            Default read buffer size.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.UsbEndpointReader.DEF_READ_TIMEOUT">
            <summary>
            Default read mTimeout.
            </summary>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbEndpointReader.Read(System.Byte[],System.Int32)">
            <summary>
            Reads data from the current <see cref="T:LibUsbDotNet.Usb.UsbEndpointReader"/>.
            </summary>
            <param name="buffer">The buffer to store the recieved data in.</param>
            <param name="timeout">Maximum time to wait for the transfer to complete.  If the transfer times out, the IO operation will be cancelled.</param>
            <returns>
            Number of bytes transmitted or less than zero if an error occured.
            </returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbEndpointReader.Read(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads data from the current <see cref="T:LibUsbDotNet.Usb.UsbEndpointReader"/>.
            </summary>
            <param name="buffer">The buffer to store the recieved data in.</param>
            <param name="offset">The position in buffer to start storing the data.</param>
            <param name="count">The maximum number of bytes to receive.</param>
            <param name="timeout">Maximum time to wait for the transfer to complete.  If the transfer times out, the IO operation will be cancelled.</param>
            <returns>
            Number of bytes transmitted or less than zero if an error occured.
            </returns>
        </member>
        <member name="E:LibUsbDotNet.Usb.UsbEndpointReader.DataReceived">
            <summary>
            The DataReceived Event is fired when new data arrives for the current <see cref="T:LibUsbDotNet.Usb.UsbEndpointReader"/>.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.UsbEndpointReader.DataReceivedEnabled">
            <summary>
            Gets/Sets a value indicating if the <see cref="E:LibUsbDotNet.Usb.UsbEndpointReader.DataReceived"/> event should be used.
            </summary>
            <remarks>
            If DataReceivedEnabled is true the <see cref="M:LibUsbDotNet.Usb.UsbEndpointReader.Read(System.Byte[],System.Int32,System.Int32,System.Int32)"/> functions cannot be used.
            </remarks>
        </member>
        <member name="P:LibUsbDotNet.Usb.UsbEndpointReader.ReadEndpoint">
            <summary>
            The endpoint ID number that this instance is reading from.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.UsbEndpointReader.EpNum">
            <summary>
            The endpoint number as a <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.UsbEndpointReader.ReadBufferSize">
            <summary>
            Size of the read buffer in bytes for the <see cref="E:LibUsbDotNet.Usb.UsbEndpointReader.DataReceived"/> event.
            </summary>
        </member>
        <member name="T:LibUsbDotNet.DeviceNotify.Info.UsbDeviceNotifyInfo">
            <summary>
            Describes the USB device that caused the notification.
            </summary>
        </member>
        <member name="M:LibUsbDotNet.DeviceNotify.Info.UsbDeviceNotifyInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:LibUsbDotNet.DeviceNotify.Info.UsbDeviceNotifyInfo"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:LibUsbDotNet.DeviceNotify.Info.UsbDeviceNotifyInfo"></see>.
            </returns>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.Info.UsbDeviceNotifyInfo.SymbolicName">
            <summary>
            The symbolc name class for this device.  For more information, see <see cref="T:LibUsbDotNet.Usb.Main.UsbSymbolicName"/>.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.Info.UsbDeviceNotifyInfo.Name">
            <summary>
            Gets the full name of the USB device that caused the notification.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.Info.UsbDeviceNotifyInfo.ClassGuid">
            <summary>
            Gets the Class Guid of the USB device that caused the notification.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.Info.UsbDeviceNotifyInfo.IdVendor">
            <summary>
            Parses and returns the VID from the <see cref="P:LibUsbDotNet.DeviceNotify.Info.UsbDeviceNotifyInfo.Name"/> property.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.Info.UsbDeviceNotifyInfo.IdProduct">
            <summary>
            Parses and returns the PID from the <see cref="P:LibUsbDotNet.DeviceNotify.Info.UsbDeviceNotifyInfo.Name"/> property.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.Info.UsbDeviceNotifyInfo.SerialNumber">
            <summary>
            Parses and returns the serial number from the <see cref="P:LibUsbDotNet.DeviceNotify.Info.UsbDeviceNotifyInfo.Name"/> property.
            </summary>
        </member>
        <member name="T:LibUsbDotNet.Usb.Main.LibUsbException">
            <summary>
            Represents an exception generated by a USB operation.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Main.LibUsbException.Sender">
            <summary>
            The object responsible for the exception.
            </summary>
        </member>
        <member name="T:LibUsbDotNet.Usb.Main.UsbSymbolicName">
            <summary>
            USB devices contain a symbolic name.  The symbolic name is persistent accrossed boots and uniquely identifies each device.
            </summary>
        </member>
        <member name="M:LibUsbDotNet.Usb.Main.UsbSymbolicName.Parse(System.String)">
            <summary>
            Parses registry strings containing USB information.  This function can parse symbolic names as well as hardware ids, compatible ids, etc.
            </summary>
            <param name="sIdentifiers"></param>
            <returns>A <see cref="T:LibUsbDotNet.Usb.Main.UsbSymbolicName"/> class with all the available information from the <paramref name="sIdentifiers"/> string.</returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.Main.UsbSymbolicName.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:LibUsbDotNet.Usb.Main.UsbSymbolicName"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:LibUsbDotNet.Usb.Main.UsbSymbolicName"></see>.
            </returns>
        </member>
        <member name="P:LibUsbDotNet.Usb.Main.UsbSymbolicName.FullName">
            <summary>
            The full symbolic name of the device.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Main.UsbSymbolicName.Vid">
            <summary>
            VendorId parsed out of the <see cref="P:LibUsbDotNet.Usb.Main.UsbSymbolicName.FullName"/>
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Main.UsbSymbolicName.Pid">
            <summary>
            ProductId parsed out of the <see cref="P:LibUsbDotNet.Usb.Main.UsbSymbolicName.FullName"/>
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Main.UsbSymbolicName.SerialNumber">
            <summary>
            SerialNumber parsed out of the <see cref="P:LibUsbDotNet.Usb.Main.UsbSymbolicName.FullName"/>
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Main.UsbSymbolicName.ClassGuid">
            <summary>
            Device class parsed out of the <see cref="P:LibUsbDotNet.Usb.Main.UsbSymbolicName.FullName"/>
            </summary>
        </member>
        <member name="T:LibUsbDotNet.Usb.Info.InfoEndpoints">
            <summary>Array list containing available endpoints in a <see cref="T:LibUsbDotNet.Usb.Info.InfoInterface"/>.</summary>
            <remarks>See the base class <see cref="T:LibUsbDotNet.Usb.Info.InfosBase`1"/> for a list of available members.</remarks>
        </member>
        <member name="T:LibUsbDotNet.Usb.Info.InfosBase`1">
            <summary><span class="cImportant">This class is not meant to be used directly.</span> <br/> This is a templated List class used as a base in the following classes:<br/>
            <see cref="T:LibUsbDotNet.Usb.Info.InfoDevices"/>,
            <see cref="T:LibUsbDotNet.Usb.Info.InfoEndpoints"/>,
            <see cref="T:LibUsbDotNet.Usb.Info.InfoInterfaces"/>,
            <see cref="T:LibUsbDotNet.Usb.Info.InfoConfigs"/>
            
            </summary>
        </member>
        <member name="M:LibUsbDotNet.Usb.Info.InfosBase`1.Contains(`0)">
            <summary>Determines whether an element is in list.</summary>
            <returns>true if item is found; otherwise, false.</returns>
            <param name="item">The object to locate in the list.</param>
        </member>
        <member name="M:LibUsbDotNet.Usb.Info.InfosBase`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the list.</summary>
            <returns>An Enumerator class for the list.</returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.Info.InfosBase`1.IndexOf(`0)">
            <summary>Determines the index of a specific item..</summary>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
            <param name="item">The object to locate.</param>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfosBase`1.Count">
            <summary>Gets the number of elements actually contained in the ArrayList.</summary>
            <returns>The number of elements actually contained in the ArrayList.</returns>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfosBase`1.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <returns>The element at the specified index.</returns>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="T:LibUsbDotNet.Usb.Info.InfoEndpoint">
            <summary>Contains USB endpoint information</summary>
        </member>
        <member name="M:LibUsbDotNet.Usb.Info.InfoEndpoint.ToString">
            <summary>
             Overriden: Returns a string representing the current <see cref="T:LibUsbDotNet.Usb.Info.InfoEndpoint"/> class.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoEndpoint.BmAttributes">
            <summary>D1:0 Transfer Type<br/>
             00 = Control<br/>
             01 = Isochronous<br/>
             10 = Bulk<br/>
             11 = Interrupt<br/> 
             The following only apply to isochronous endpoints or are set to 0.<br/>
             D3:2 Synchronisation Type:<br/>
             00 = No Synchronisation<br/>
             01 = Asynchronous<br/>
             10 = Adaptive<br/>
             11 = Synchronous <br/>
             D5:4 Usage Type:<br/> 
             00 = Data endpoint<br/>
             01 = Feedback endpoint<br/>
             10 = Implicit feedback Data endpoint<br/>
             11 = Reserved: Set to 0 <br/>
             D7:6 Reserved: Set to 0 <br/>
             </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoEndpoint.DescriptorType">
            <summary>ENDPOINT descriptor type (= 5)</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoEndpoint.EndpointAddress">
            <summary>The address of this endpoint within the device.<br/>
            D7: Direction<br/>
            0 = OUT, 1 = IN<br/>
            D6-D4: Set to 0<br/>
            D3-D0: Endpoint number
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoEndpoint.Interval">
            <summary>Interval for polling endpoint for data transfers. Expressed in frames (ms) for low/full speed or microframes (125us) for high speed. </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoEndpoint.Length">
            <summary>Size of this descriptor in bytes</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoEndpoint.MaxPacketSize">
            <summary>Maximum packet size this endpoint can send or receive when this configuration is selected </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoEndpoint.Refresh">
            <summary>Device specfic setting</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoEndpoint.SynchAddress">
            <summary>Device specfic setting</summary>
        </member>
        <member name="T:LibUsbDotNet.Usb.Main.WriteEndpoints">
            <summary>
            Availabled endpoint numbers/ids for writing.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.WriteEndpoints.Ep01">
            <summary>
            Endpoint 1
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.WriteEndpoints.Ep02">
            <summary>
            Endpoint 2
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.WriteEndpoints.Ep03">
            <summary>
            Endpoint 3
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.WriteEndpoints.Ep04">
            <summary>
            Endpoint 4
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.WriteEndpoints.Ep05">
            <summary>
            Endpoint 5
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.WriteEndpoints.Ep06">
            <summary>
            Endpoint 6
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.WriteEndpoints.Ep07">
            <summary>
            Endpoint 7
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.WriteEndpoints.Ep08">
            <summary>
            Endpoint 8
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.WriteEndpoints.Ep09">
            <summary>
            Endpoint 9
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.WriteEndpoints.Ep10">
            <summary>
            Endpoint 10
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.WriteEndpoints.Ep11">
            <summary>
            Endpoint 11
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.WriteEndpoints.Ep12">
            <summary>
            Endpoint 12
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.WriteEndpoints.Ep13">
            <summary>
            Endpoint 13
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.WriteEndpoints.Ep14">
            <summary>
            Endpoint 14
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.WriteEndpoints.Ep15">
            <summary>
            Endpoint 15
            </summary>
        </member>
        <member name="T:LibUsbDotNet.DeviceNotify.Info.VolumeNotifyInfo">
            <summary>
            Describes the storage volume that caused the notification.
            </summary>
        </member>
        <member name="M:LibUsbDotNet.DeviceNotify.Info.VolumeNotifyInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:LibUsbDotNet.DeviceNotify.Info.VolumeNotifyInfo"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:LibUsbDotNet.DeviceNotify.Info.VolumeNotifyInfo"></see>.
            </returns>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.Info.VolumeNotifyInfo.Letter">
            <summary>
            Gets the letter representation of the unitmask.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.Info.VolumeNotifyInfo.ChangeAffectsMediaInDrive">
            <summary>
             If true, change affects media in drive. If false, change affects physical device or drive.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.Info.VolumeNotifyInfo.IsNetworkVolume">
            <summary>
            If True, the indicated logical volume is a network volume
            </summary>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.Info.VolumeNotifyInfo.Flags">
            <summary>
            Raw DEV_BROADCAST_VOLUME flags.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.Info.VolumeNotifyInfo.Unitmask">
            <summary>
            Gets the bit unit mask of the device. IE (bit 0 = A:, bit 1 = B:, etc..)
            </summary>
        </member>
        <member name="T:LibUsbDotNet.Usb.Main.DataReceivedArgs">
            <summary>
            Endpoint data received arguments returned by the <see cref="E:LibUsbDotNet.Usb.UsbEndpointReader.DataReceived"/> event.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Main.DataReceivedArgs.Buffer">
            <summary>
            Gets the buffer of the received data.
            </summary>
            <remarks>
            Use the <see cref="P:LibUsbDotNet.Usb.Main.DataReceivedArgs.Count"/> property to determine the number of bytes actually received.
            </remarks>
        </member>
        <member name="P:LibUsbDotNet.Usb.Main.DataReceivedArgs.Count">
            <summary>
            Gets the number of bytes received.
            </summary>
        </member>
        <member name="T:LibUsbDotNet.Usb.Internal.EndpointTypes">
            <summary>
            Supported USB endpoint types.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Internal.EndpointTypes.Bulk">
            <summary>
            Specifies a Bulk style endpoint.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Internal.EndpointTypes.Interrupt">
            <summary>
            Specifies a Interrupt style endpoint.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Internal.EndpointTypes.Isochronous">
            <summary>
            Specifies a Isochronous style endpoint.
            </summary>
        </member>
        <member name="T:LibUsbDotNet.DeviceNotify.DeviceNotifier">
            <summary>
            Main class for managing system device notification events.
            </summary>
            <remarks>
            Use this class to detect when plug-n-play devices are inserted and removed from the PC.
            <code>
            Device notifier output to debug window.
            
            using System;
            using System.Collections.Generic;
            using System.Diagnostics;
            using System.Windows.Forms;
            using LibUsbDotNet.DeviceNotify;
            using LibUsbDotNet.Usb;
            using LibUsbDotNet.Usb.Main;
            namespace Test_DeviceNotify
            {
                public partial class Form1 : Form
                {
                    private DeviceNotifier mDevNotifier;
            
                    public Form1()
                    {
                       // General Form1 initializaion
            	  // ...
            		
            		// Create  a device notifier instance.
                        mDevNotifier = new DeviceNotifier();
            
            		// Add a handler to the OnDeviceNotify event.
                        mDevNotifier.OnDeviceNotify += mDevNotifier_OnDeviceNotify;
                    }
                    private void mDevNotifier_OnDeviceNotify(object sender, DeviceNotifyEventArgs e)
                    {
                        Debug.Print(e.Object.ToString());
                    }
            
                       // General Form1 members.
            	  // ...
            
            	}
            }
            </code>
            </remarks>
        </member>
        <member name="M:LibUsbDotNet.DeviceNotify.DeviceNotifier.#ctor">
            <summary>
             Creates an instance of the <see cref="T:LibUsbDotNet.DeviceNotify.DeviceNotifier"/> class.
            </summary>
        </member>
        <member name="M:LibUsbDotNet.DeviceNotify.DeviceNotifier.Finalize">
            <summary>
            Releases the resources associated with this window. 
            </summary>
            
        </member>
        <member name="E:LibUsbDotNet.DeviceNotify.DeviceNotifier.OnDeviceNotify">
            <summary>
            Main Notify event for all device notifications.
            </summary>
        </member>
        <member name="T:LibUsbDotNet.Usb.Main.ErrorCodes">
            <summary>
            Common error codes returned by IO functions.  Any return value less than zero is considered an error.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ErrorCodes.ENOENT">
            <summary>
            No such file or directory. The specified file or directory does not exist or cannot be found. This message can occur whenever a specified file does not exist or a component of a path does not specify an existing directory.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ErrorCodes.EIO">
            <summary>
            I/O error
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ErrorCodes.ENOMEM">
            <summary>
            Not enough memory
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ErrorCodes.EFBIG">
            <summary>
            File too large
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ErrorCodes.EINVAL">
            <summary>
            The operation is invalid given the current state of the device.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ErrorCodes.ETIMEDOUT">
            <summary>
            The IO operation timed out.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ErrorCodes.EINTR">
            <summary>
            The IO operation was successfully cancelled.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ErrorCodes.EBUSY">
            <summary>
            An attempt was made to read/write to an endpoint that allready has a pending IO operation.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ErrorCodes.EFAULT">
            <summary>
            Bad address.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ErrorCodes.ENODEV">
            <summary>
            Attempted access on a disposed object.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ErrorCodes.EEXCEPTION">
            <summary>
            An internal exception was generated. Use the <see cref="E:LibUsbDotNet.Usb.UsbGlobals.OnUsbError"/> event for more information.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ErrorCodes.ETHREADABORT">
            <summary>
            A read thread was destructively aborted.
            </summary>
        </member>
        <member name="T:LibUsbDotNet.Usb.UsbGlobals">
            <summary>
            Global functions and members common to all USB tasks.
            </summary>
        </member>
        <member name="E:LibUsbDotNet.Usb.UsbGlobals.OnUsbError">
            <summary>
            This global event is fired for all usb related errors.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.UsbGlobals.DeviceList">
             <summary>
             Contains a global list of all usb devices that are attached to the PC and available for use. 
             </summary>
             <remarks>
             This is the starting point for all usb operations.  To open and use a USB device you must first find the <see cref="T:LibUsbDotNet.Usb.UsbDevice"/> class in this <see cref="P:LibUsbDotNet.Usb.UsbGlobals.DeviceList"/>.
             </remarks>
            <returns>
            A list of <see cref="T:LibUsbDotNet.Usb.UsbDevice"></see> classes that represent all usb devices attached to the PC.
            </returns>
        </member>
        <member name="P:LibUsbDotNet.Usb.UsbGlobals.LastError">
            <summary>
            Get a string representation of the last error encountered by all usb functions.
            </summary>
        </member>
        <member name="T:LibUsbDotNet.Usb.Info.InfoConfigs">
            <summary>Array list containing all available configurations <see cref="T:LibUsbDotNet.Usb.Info.InfoDevice"/>.</summary>
            <remarks>See the base class <see cref="T:LibUsbDotNet.Usb.Info.InfosBase`1"/> for a list of available members.</remarks>
        </member>
        <member name="T:LibUsbDotNet.Usb.Info.InfoConfig">
            <summary>Contains USB device config information</summary>
        </member>
        <member name="M:LibUsbDotNet.Usb.Info.InfoConfig.ToString">
            <summary>
             Overriden: Returns a string representing the current <see cref="T:LibUsbDotNet.Usb.Info.InfoConfig"/> class.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoConfig.BmAttributes">
            <summary>
             D7: Must be set to 1<br/>
             D6: Self-powered<br/>
             D5: Remote Wakeup<br/>
             D4...D0: Set to 0
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoConfig.ConfigurationIndex">
            <summary>
             Index of string descriptor describing configuration - is set to 0 if no string
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoConfig.ConfigurationString">
            <summary>
             string descriptor describing configuration
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoConfig.ConfigurationValue">
            <summary>
             Value used by Set Configuration to select this configuration
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoConfig.DescriptorType">
            <summary>
             CONFIGURATION descriptor type (= 2)
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoConfig.Extra">
            <summary>
            	Custom, device specific descriptor information.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoConfig.Length">
            <summary>
             Size of this descriptor in bytes
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoConfig.MaxPower">
            <summary>
             Maximum current drawn by device in this configuration. In units of 2mA. So 50 means 100 mA.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoConfig.NumInterfaces">
            <summary>
             Number of interfaces supported by this configuration
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoConfig.TotalLength">
            <summary>
             Total number of bytes in this descriptor and all the following descriptors.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoConfig.InfoInterfaceList">
            <summary>
             Array of available interfaces for this configuration
            </summary>
        </member>
        <member name="T:LibUsbDotNet.Usb.Info.InfoInterfaces">
            <summary>Array list containing available interfaces in a <see cref="T:LibUsbDotNet.Usb.Info.InfosBase`1"/>.</summary>
            <remarks>See the base class <see cref="T:LibUsbDotNet.Usb.Info.InfoConfig"/> for a list of available members.</remarks>
        </member>
        <member name="T:LibUsbDotNet.Usb.Info.InfoInterface">
            <summary>Contains USB interface information</summary>
        </member>
        <member name="M:LibUsbDotNet.Usb.Info.InfoInterface.ToString">
            <summary>
             Overriden: Returns a string representing the current <see cref="T:LibUsbDotNet.Usb.Info.InfoInterface"/> class.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoInterface.AlternateSetting">
            <summary>Value used to select this alternate setting for this interface.</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoInterface.DescriptorType">
            <summary>
             INTERFACE descriptor type (= 4)
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoInterface.InfoEndpointList">
            <summary>
             Array of available endpoints for this interface
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoInterface.InterfaceClass">
            <summary>Class code assigned by USB-IF<br/>
             00h is a reserved value <br/>
             FFh means vendor-defined class <br/>
             Any other value must be a class code 
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoInterface.InterfaceIndex">
            <summary>Index of string descriptor describing interface - set to 0 if no string</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoInterface.InterfaceNumber">
            <summary>Number identifying this interface. Zero-based value.</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoInterface.InterfaceProtocol">
            <summary>Protocol Code assigned by USB-IF</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoInterface.InterfaceString">
            <summary>String descriptor describing interface</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoInterface.InterfaceSubClass">
            <summary>SubClass Code assigned by USB-IF</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoInterface.Length">
            <summary>
             Size of this descriptor in bytes
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoInterface.NumEndpoints">
            <summary>Number of endpoints used by this interface. Doesn't include control endpoint 0. </summary>
        </member>
        <member name="T:LibUsbDotNet.DeviceNotify.DeviceType">
            <summary>
            Type of notification device.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.DeviceNotify.DeviceType.OEM">
            <summary>
            oem-defined device type.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.DeviceNotify.DeviceType.DEVNODE">
            <summary>
            devnode number.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.DeviceNotify.DeviceType.VOLUME">
            <summary>
            logical volume.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.DeviceNotify.DeviceType.PORT">
            <summary>
            serial, parallel.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.DeviceNotify.DeviceType.NET">
            <summary>
            network resource.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.DeviceNotify.DeviceType.DEVICEINTERFACE">
            <summary>
            device interface class
            </summary>
        </member>
        <member name="F:LibUsbDotNet.DeviceNotify.DeviceType.HANDLE">
            <summary>
            file system handle.
            </summary>
        </member>
        <member name="T:LibUsbDotNet.DeviceNotify.EventType">
            <summary>
            Type of notification event.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.DeviceNotify.EventType.CUSTOMEVENT">
            <summary>
            A custom event has occurred.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.DeviceNotify.EventType.DEVICEARRIVAL">
            <summary>
            A device or piece of media has been inserted and is now available.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.DeviceNotify.EventType.DEVICEQUERYREMOVE">
            <summary>
            Permission is requested to remove a device or piece of media. Any application can deny this request and cancel the removal.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.DeviceNotify.EventType.DEVICEQUERYREMOVEFAILED">
            <summary>
            A request to remove a device or piece of media has been canceled.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.DeviceNotify.EventType.DEVICEREMOVECOMPLETE">
            <summary>
            A device or piece of media has been removed.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.DeviceNotify.EventType.DEVICEREMOVEPENDING">
            <summary>
            A device or piece of media is about to be removed. Cannot be denied.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.DeviceNotify.EventType.DEVICETYPESPECIFIC">
            <summary>
            A device-specific event has occurred.
            </summary>
        </member>
        <member name="T:LibUsbDotNet.DeviceNotify.DeviceNotifyEventArgs">
            <summary>
            Describes the device notify event
            </summary>
        </member>
        <member name="M:LibUsbDotNet.DeviceNotify.DeviceNotifyEventArgs.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:LibUsbDotNet.DeviceNotify.DeviceNotifyEventArgs"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:LibUsbDotNet.DeviceNotify.DeviceNotifyEventArgs"></see>.
            </returns>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.DeviceNotifyEventArgs.Volume">
            <summary>
            Gets the <see cref="T:LibUsbDotNet.DeviceNotify.Info.VolumeNotifyInfo"/> class.
            </summary>
            <remarks>
            This value is null if the <see cref="P:LibUsbDotNet.DeviceNotify.DeviceNotifyEventArgs.DeviceType"/> is not set to <see cref="F:LibUsbDotNet.DeviceNotify.DeviceType.VOLUME"/>
            </remarks>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.DeviceNotifyEventArgs.Port">
            <summary>
            Gets the <see cref="T:LibUsbDotNet.DeviceNotify.Info.PortNotifyInfo"/> class.
            </summary>
            <remarks>
            This value is null if the <see cref="P:LibUsbDotNet.DeviceNotify.DeviceNotifyEventArgs.DeviceType"/> is not set to <see cref="F:LibUsbDotNet.DeviceNotify.DeviceType.PORT"/>
            </remarks>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.DeviceNotifyEventArgs.Device">
            <summary>
            Gets the <see cref="T:LibUsbDotNet.DeviceNotify.Info.UsbDeviceNotifyInfo"/> class.
            </summary>
            <remarks>
            This value is null if the <see cref="P:LibUsbDotNet.DeviceNotify.DeviceNotifyEventArgs.DeviceType"/> is not set to <see cref="F:LibUsbDotNet.DeviceNotify.DeviceType.DEVICEINTERFACE"/>
            </remarks>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.DeviceNotifyEventArgs.EventType">
            <summary>
            Gets the <see cref="P:LibUsbDotNet.DeviceNotify.DeviceNotifyEventArgs.EventType"/> for this notification.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.DeviceNotifyEventArgs.DeviceType">
            <summary>
            Gets the <see cref="P:LibUsbDotNet.DeviceNotify.DeviceNotifyEventArgs.DeviceType"/> for this notification.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.DeviceNotifyEventArgs.Object">
            <summary>
            Gets the notification class as an object.
            </summary>
            <remarks>
            This value is never null.
            </remarks>
        </member>
        <member name="T:LibUsbDotNet.Usb.Info.InfoDevice">
            <summary>Contains USB device information</summary>
        </member>
        <member name="M:LibUsbDotNet.Usb.Info.InfoDevice.ToString">
            <summary>
             Overriden: Returns a string representing the current <see cref="T:LibUsbDotNet.Usb.Info.InfoDevice"/> class.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.BcdDevice">
            <summary>Device release number in binary coded decimal</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.BcdUSB">
            <summary>USB Spec release number</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.DescriptorType">
            <summary>DEVICE descriptor type (= 1)</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.DeviceClass">
            <summary>Class code assigned by USB-IF<br/>
             00h means each interface defines its own class<br/>
             FFh means vendor-defined class<br/>
             Any other value must be a class code 
             </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.DeviceProtocol">
            <summary>Protocol Code assigned by USB-IF</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.DeviceSubClass">
            <summary>SubClass Code assigned by USB-IF</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.Filename">
            <summary>Unique filename describing device.</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.IdProduct">
            <summary>Product ID - assigned by the manufacturer</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.IdVendor">
            <summary>Vendor ID - must be obtained from USB-IF</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.Length">
            <summary>Size of this descriptor in bytes</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.ManufacturerIndex">
            <summary>Index of string descriptor describing manufacturer - set to 0 if no string</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.ManufacturerString">
            <summary>String descriptor describing manufacturer</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.MaxPacketSize0">
            <summary>Max packet size for endpoint 0. Must be 8, 16, 32 or 64</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.NumConfigurations">
            <summary>Number of possible configurations</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.ProductIndex">
            <summary>Index of string descriptor describing product - set to 0 if no string</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.ProductString">
            <summary>String descriptor describing product</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.SerialString">
            <summary>String descriptor describing device serial number</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.Info.InfoDevice.SerialNumberIndex">
            <summary>Index of string descriptor describing device serial number - set to 0 if no string</summary>
        </member>
        <member name="T:LibUsbDotNet.Usb.Info.InfoDevices">
            <summary>Array list containing available USB devices.</summary>
            <remarks>See the base class <see cref="T:LibUsbDotNet.Usb.Info.InfosBase`1"/> for a list of available members.</remarks>
        </member>
        <member name="T:LibUsbDotNet.Usb.UsbDevice">
            <summary>
            Class containing device specific functions and members for communication with a USB device.
            </summary>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.ClaimInterface(System.Int32)">
            <summary>Claims an interface for use in this <see cref="T:LibUsbDotNet.Usb.UsbDevice"/> class.</summary>
            <returns>0 on success or less than 0 on error.</returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.Close">
            <summary>Closes the device.</summary>
            <remarks><dl class="cBList"><dt>The <see cref="M:LibUsbDotNet.Usb.UsbDevice.Close"/> function performs the following actions:</dt>
            <dd>Attempts to safely stop read threads on all <see cref="P:LibUsbDotNet.Usb.UsbDevice.ActiveEndpoints"/>.</dd>
            <dd>Aborts read threads on all <see cref="P:LibUsbDotNet.Usb.UsbDevice.ActiveEndpoints"/> if they fail to stop gracefully.</dd>
            <dd>Closes and releases the internal device handle.</dd></dl></remarks>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.GetAltInterface(System.Int32,System.Byte@)">
            <summary>Gets the active alternate interface for the specified interface.</summary>
            <remarks>On success, the <paramref name="bAltValue" /> contains the value of the current active alternate interface for the specified interface.</remarks>
            <returns>0 on success or less than 0 on error.</returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.GetConfiguration(System.Byte@)">
            <summary>Gets the active configuration of the opened device.</summary>
            <remarks>On success, the <paramref name="bCfgValue"/> contains the value of the current active configuration for this <see cref="T:LibUsbDotNet.Usb.UsbDevice"/>.</remarks>
            <returns>0 on success or less than 0 on error.</returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.GetString(System.Int32,System.String@)">
            <summary>
            Retrieves a string descriptor.
            </summary>
            <param name="stringIndex">The index of the string to be retrieved.</param>
            <param name="returnString">On success, the <see cref="T:System.String"/> for the specified <paramref name="stringIndex"/>.</param>
            <returns>On success, the length of the string.  On failure, Less than zero.</returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.GetString(System.Int32,System.Int32,System.String@)">
            <summary>
            Retrieves a string descriptor.
            </summary>
            <param name="stringIndex">The index of the string to be retrieved.</param>
            <param name="langID">The language id of the string.  Default is 0x409.</param>
            <param name="returnString">On success, the <see cref="T:System.String"/> for the specified <paramref name="stringIndex"/> and <paramref name="langID"/>.</param>
            <returns></returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.IOControlMessage(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Sends/receives a control message to/from the current <see cref="T:LibUsbDotNet.Usb.UsbDevice"/>.
            </summary>
            <param name="requestType">USB request type.</param>
            <param name="request">USB request.</param>
            <param name="value">USB value.</param>
            <param name="index">USB index.</param>
            <param name="bytes">Buffer to send/recv from device.</param>
            <param name="timeout">Maximum amount of time to wait for the function to complete.</param>
            <returns>On Success, the number of bytes transmitted. Less than zero on failure.</returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.Open">
            <summary>Opens this <see cref="T:LibUsbDotNet.Usb.UsbDevice"/> for communication.</summary>
            <returns>True if the device was opened successfully.</returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.OpenBulkEndpointReader(LibUsbDotNet.Usb.Main.ReadEndpoints,System.Int32)">
            <summary>
            Opens an endpoint for reading
            </summary>
            <param name="readEndpoint">Endpoint number for read operations.</param>
            <param name="readBufferSize">Size of the read buffer allocated for the <see cref="E:LibUsbDotNet.Usb.UsbEndpointReader.DataReceived"/> event.</param>
            <returns>An <see cref="T:LibUsbDotNet.Usb.UsbEndpointReader"/> class ready for reading.
            If the specified endpoint has allready been opened, the original <see cref="T:LibUsbDotNet.Usb.UsbEndpointReader"/> object will be returned.
            </returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.OpenBulkEndpointReader(LibUsbDotNet.Usb.Main.ReadEndpoints)">
            <summary>
            Opens an endpoint for reading
            </summary>
            <param name="readEndpoint">Endpoint number for read operations.</param>
            <returns>A <see cref="T:LibUsbDotNet.Usb.UsbEndpointReader"/> class ready for reading.
            If the specified endpoint has allready been opened, the original <see cref="T:LibUsbDotNet.Usb.UsbEndpointReader"/> object will be returned.
            </returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.OpenBulkEndpointWriter(LibUsbDotNet.Usb.Main.WriteEndpoints)">
            <summary>
            Opens an endpoint for writing
            </summary>
            <param name="writeEndpoint">Endpoint number for read operations.</param>
            <returns>A <see cref="T:LibUsbDotNet.Usb.UsbEndpointWriter"/> class ready for writing.
            If the specified endpoint has allready been opened, the original <see cref="T:LibUsbDotNet.Usb.UsbEndpointWriter"/> object will be returned.
            </returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.OpenEndpointReader(LibUsbDotNet.Usb.Main.ReadEndpoints,System.Int32,LibUsbDotNet.Usb.Internal.EndpointTypes,System.Int32)">
            <summary>
            Opens an endpoint for reading
            </summary>
            <param name="readEndpoint">Endpoint number for read operations.</param>
            <param name="readBufferSize">Size of the read buffer allocated for the <see cref="E:LibUsbDotNet.Usb.UsbEndpointReader.DataReceived"/> event.</param>
            <param name="endPointType">One of the <see cref="T:LibUsbDotNet.Usb.Internal.EndpointTypes"/> enumerations.</param>
            <param name="packetSize">The packet size to use when endPointType is set to <see cref="F:LibUsbDotNet.Usb.Internal.EndpointTypes.Isochronous"/>.</param>
            <returns>A <see cref="T:LibUsbDotNet.Usb.UsbEndpointReader"/> class ready for reading.
            If the specified endpoint has allready been opened, the original <see cref="T:LibUsbDotNet.Usb.UsbEndpointReader"/> object will be returned.
            </returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.OpenEndpointWriter(LibUsbDotNet.Usb.Main.WriteEndpoints,LibUsbDotNet.Usb.Internal.EndpointTypes,System.Int32)">
            <summary>
            Opens an endpoint for writing
            </summary>
            <param name="writeEndpoint">Endpoint number for read operations.</param>
            <param name="endPointType">One of the <see cref="T:LibUsbDotNet.Usb.Internal.EndpointTypes"/> enumerations.</param>
            <param name="packetSize">The packet size to use when endPointType is set to <see cref="F:LibUsbDotNet.Usb.Internal.EndpointTypes.Isochronous"/>.</param>
            <returns>A <see cref="T:LibUsbDotNet.Usb.UsbEndpointWriter"/> class ready for writing.
            If the specified endpoint has allready been opened, the original <see cref="T:LibUsbDotNet.Usb.UsbEndpointWriter"/> object will be returned.
            </returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.OpenInterruptEndpointReader(LibUsbDotNet.Usb.Main.ReadEndpoints,System.Int32)">
            <summary>
            Opens an endpoint for reading
            </summary>
            <param name="readEndpoint">Endpoint number for read operations.</param>
            <param name="readBufferSize">Size of the read buffer allocated for the <see cref="E:LibUsbDotNet.Usb.UsbEndpointReader.DataReceived"/> event.</param>
            <returns>A <see cref="T:LibUsbDotNet.Usb.UsbEndpointReader"/> class ready for reading.
            If the specified endpoint has allready been opened, the original <see cref="T:LibUsbDotNet.Usb.UsbEndpointReader"/> object will be returned.
            </returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.OpenInterruptEndpointReader(LibUsbDotNet.Usb.Main.ReadEndpoints)">
            <summary>
            Opens an endpoint for reading
            </summary>
            <param name="readEndpoint">Endpoint number for read operations.</param>
            <returns>A <see cref="T:LibUsbDotNet.Usb.UsbEndpointReader"/> class ready for reading.
            If the specified endpoint has allready been opened, the original <see cref="T:LibUsbDotNet.Usb.UsbEndpointReader"/> object will be returned.
            </returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.OpenInterruptEndpointWriter(LibUsbDotNet.Usb.Main.WriteEndpoints)">
            <summary>
            Opens an endpoint for writing
            </summary>
            <param name="writeEndpoint">Endpoint number for read operations.</param>
            <returns>A <see cref="T:LibUsbDotNet.Usb.UsbEndpointWriter"/> class ready for writing.
            If the specified endpoint has allready been opened, the original <see cref="T:LibUsbDotNet.Usb.UsbEndpointWriter"/> object will be returned.
            </returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.RefreshConfigs">
            <summary>Gets and refreshes all available configuration information this <see cref="T:LibUsbDotNet.Usb.UsbDevice"/>.</summary>
            <returns>A <see cref="T:LibUsbDotNet.Usb.Info.InfoConfigs"/> list containing all device config information.</returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.ReleaseInterface(System.Int32)">
            <summary>Releases a claimed interface.  See <see cref="M:LibUsbDotNet.Usb.UsbDevice.ClaimInterface(System.Int32)"/>.</summary>
            <returns>0 on success or less than 0 on error.</returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.SetAltInterface(System.Int32)">
            <summary>Sets the alternate interface to use for the claimed interface.</summary>
            <remarks>The <paramref name="iAltInterface"/> parameter is the value as specified in the descriptor field <see cref="P:LibUsbDotNet.Usb.Info.InfoInterface.AlternateSetting"/>.</remarks>
            <returns>0 on success or less than 0 on error.</returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.SetConfiguration(System.Int32)">
            <summary>Sets the active configuration of the opened device.</summary>
            <remarks>The <paramref name="iConfig"/> parameter is the value as specified in the descriptor field <see cref="P:LibUsbDotNet.Usb.Info.InfoConfig.ConfigurationValue"/></remarks>
            <returns>0 on success or less than 0 on error.</returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.UsbDevice.Finalize">
            <summary>
            Allows a <see cref="T:LibUsbDotNet.Usb.UsbDevice"></see> to attempt to free resources and perform other cleanup operations before the <see cref="T:LibUsbDotNet.Usb.UsbDevice"></see> is reclaimed by garbage collection.
            </summary>
            
        </member>
        <member name="P:LibUsbDotNet.Usb.UsbDevice.ActiveEndpoints">
            <summary>An array of <see cref="T:LibUsbDotNet.Usb.UsbEndpointBase"/> classes that were created with <see cref="M:LibUsbDotNet.Usb.UsbDevice.OpenEndpointReader(LibUsbDotNet.Usb.Main.ReadEndpoints,System.Int32,LibUsbDotNet.Usb.Internal.EndpointTypes,System.Int32)"/> or <see cref="M:LibUsbDotNet.Usb.UsbDevice.OpenEndpointWriter(LibUsbDotNet.Usb.Main.WriteEndpoints,LibUsbDotNet.Usb.Internal.EndpointTypes,System.Int32)"/> functions.</summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.UsbDevice.Info">
            <summary>
            Gets the <see cref="T:LibUsbDotNet.Usb.Info.InfoDevice"/> class for this <see cref="T:LibUsbDotNet.Usb.UsbDevice"/>.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.UsbDevice.Configs">
            <summary>
            Gets the cached configuration information for this <see cref="T:LibUsbDotNet.Usb.UsbDevice"/>.  To refresh configuration information use <see cref="M:LibUsbDotNet.Usb.UsbDevice.RefreshConfigs"/>.
            </summary>
        </member>
        <member name="P:LibUsbDotNet.Usb.UsbDevice.IsOpen">
            <summary>
            True if this <see cref="T:LibUsbDotNet.Usb.UsbDevice"/> has been opened and has a valid handle.
            </summary>
        </member>
        <member name="T:LibUsbDotNet.Usb.Internal.API.LibUsb_AltInterfaceDescriptor">
            <summary>
            Interface descriptor
            </summary>
        </member>
        <member name="T:LibUsbDotNet.Usb.Internal.API.LibUsb_EndpointDescriptor">
            <summary>
            Endpoint descriptor
            </summary>
        </member>
        <member name="T:LibUsbDotNet.Usb.Main.UsbDeviceList">
            <summary>
            Device list.
            </summary>
        </member>
        <member name="M:LibUsbDotNet.Usb.Main.UsbDeviceList.GetEnumerator">
            <summary>
            Returns <see cref="T:LibUsbDotNet.Usb.UsbDevice"></see> enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:LibUsbDotNet.Usb.UsbDevice"></see> enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.Main.UsbDeviceList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:LibUsbDotNet.Usb.Main.UsbDeviceList.Contains(LibUsbDotNet.Usb.UsbDevice)">
            <summary>
            Determines whether the <see cref="T:LibUsbDotNet.Usb.Main.UsbDeviceList"></see> contains a specific value.
            </summary>
            
            <returns>
            true if item is found in the <see cref="T:LibUsbDotNet.Usb.Main.UsbDeviceList"></see>; otherwise, false.
            </returns>
            
            <param name="item">The <see cref="T:LibUsbDotNet.Usb.UsbDevice"></see> to locate in the <see cref="T:LibUsbDotNet.Usb.Main.UsbDeviceList"></see>.</param>
        </member>
        <member name="M:LibUsbDotNet.Usb.Main.UsbDeviceList.IndexOf(LibUsbDotNet.Usb.UsbDevice)">
            <summary>
            Determines the index of a specific <see cref="T:LibUsbDotNet.Usb.UsbDevice"></see> in the <see cref="T:LibUsbDotNet.Usb.Main.UsbDeviceList"></see>.
            </summary>
            
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
            
            <param name="item">The <see cref="T:LibUsbDotNet.Usb.UsbDevice"></see> to locate in the <see cref="T:LibUsbDotNet.Usb.Main.UsbDeviceList"></see>.</param>
        </member>
        <member name="P:LibUsbDotNet.Usb.Main.UsbDeviceList.Item(System.Int32)">
             <summary>
             Gets the <see cref="T:LibUsbDotNet.Usb.UsbDevice"></see> item at the specified index.
             </summary>
             <param name="index">The zero-based index of the item.</param>
             <returns>The <see cref="T:LibUsbDotNet.Usb.UsbDevice"></see> item at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:LibUsbDotNet.Usb.Main.UsbDeviceList"></see>.</exception>
        </member>
        <member name="P:LibUsbDotNet.Usb.Main.UsbDeviceList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:LibUsbDotNet.Usb.Main.UsbDeviceList"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:LibUsbDotNet.Usb.Main.UsbDeviceList"></see>.
            </returns>
            
        </member>
        <member name="T:LibUsbDotNet.Usb.Main.ReadEndpoints">
            <summary>
            Availabled endpoint numbers/ids for reading.
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ReadEndpoints.Ep01">
            <summary>
            Endpoint 1
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ReadEndpoints.Ep02">
            <summary>
            Endpoint 2
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ReadEndpoints.Ep03">
            <summary>
            Endpoint 3
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ReadEndpoints.Ep04">
            <summary>
            Endpoint 4
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ReadEndpoints.Ep05">
            <summary>
            Endpoint 5
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ReadEndpoints.Ep06">
            <summary>
            Endpoint 6
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ReadEndpoints.Ep07">
            <summary>
            Endpoint 7
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ReadEndpoints.Ep08">
            <summary>
            Endpoint 8
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ReadEndpoints.Ep09">
            <summary>
            Endpoint 9
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ReadEndpoints.Ep10">
            <summary>
            Endpoint 10
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ReadEndpoints.Ep11">
            <summary>
            Endpoint 11
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ReadEndpoints.Ep12">
            <summary>
            Endpoint 12
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ReadEndpoints.Ep13">
            <summary>
            Endpoint 13
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ReadEndpoints.Ep14">
            <summary>
            Endpoint 14
            </summary>
        </member>
        <member name="F:LibUsbDotNet.Usb.Main.ReadEndpoints.Ep15">
            <summary>
            Endpoint 15
            </summary>
        </member>
        <member name="T:LibUsbDotNet.DeviceNotify.Internal.SafeNotifyHandle">
            <summary>
            Simple classes like this are what .NET application reliable.
            This virtually guarantees that any notify handle that gets registered will get unregistered.
            </summary>
        </member>
        <member name="T:LibUsbDotNet.Usb.Main.UsbEndpointList">
            <summary>
            Endpoint list.
            </summary>
        </member>
        <member name="M:LibUsbDotNet.Usb.Main.UsbEndpointList.GetEnumerator">
            <summary>
            Returns <see cref="T:LibUsbDotNet.Usb.UsbEndpointBase"></see> enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:LibUsbDotNet.Usb.UsbEndpointBase"></see> enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:LibUsbDotNet.Usb.Main.UsbEndpointList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:LibUsbDotNet.Usb.Main.UsbEndpointList.Clear">
            <summary>
            Removes all items from the <see cref="T:LibUsbDotNet.Usb.Main.UsbEndpointList"></see>.
            </summary>
        </member>
        <member name="M:LibUsbDotNet.Usb.Main.UsbEndpointList.Contains(LibUsbDotNet.Usb.UsbEndpointBase)">
            <summary>
            Determines whether the <see cref="T:LibUsbDotNet.Usb.Main.UsbEndpointList"></see> contains a specific value.
            </summary>
            
            <returns>
            true if item is found in the <see cref="T:LibUsbDotNet.Usb.Main.UsbEndpointList"></see>; otherwise, false.
            </returns>
            
            <param name="item">The <see cref="T:LibUsbDotNet.Usb.UsbEndpointBase"></see> to locate in the <see cref="T:LibUsbDotNet.Usb.Main.UsbEndpointList"></see>.</param>
        </member>
        <member name="M:LibUsbDotNet.Usb.Main.UsbEndpointList.IndexOf(LibUsbDotNet.Usb.UsbEndpointBase)">
            <summary>
            Determines the index of a specific <see cref="T:LibUsbDotNet.Usb.UsbEndpointBase"></see> in the <see cref="T:LibUsbDotNet.Usb.Main.UsbEndpointList"></see>.
            </summary>
            
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
            
            <param name="item">The <see cref="T:LibUsbDotNet.Usb.UsbEndpointBase"></see> to locate in the <see cref="T:LibUsbDotNet.Usb.Main.UsbEndpointList"></see>.</param>
        </member>
        <member name="M:LibUsbDotNet.Usb.Main.UsbEndpointList.Remove(LibUsbDotNet.Usb.UsbEndpointBase)">
            <summary>
            Removes the specified <see cref="T:LibUsbDotNet.Usb.UsbEndpointBase"></see> in the <see cref="T:LibUsbDotNet.Usb.Main.UsbEndpointList"></see>.
            </summary>
            
            <param name="item">The <see cref="T:LibUsbDotNet.Usb.UsbEndpointBase"></see> to remove in the <see cref="T:LibUsbDotNet.Usb.Main.UsbEndpointList"></see>.</param>
        </member>
        <member name="M:LibUsbDotNet.Usb.Main.UsbEndpointList.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:LibUsbDotNet.Usb.Main.UsbEndpointList"></see> item at the specified index.
            </summary>
            
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:LibUsbDotNet.Usb.Main.UsbEndpointList"></see>.</exception>
        </member>
        <member name="P:LibUsbDotNet.Usb.Main.UsbEndpointList.Item(System.Int32)">
             <summary>
             Gets the <see cref="T:LibUsbDotNet.Usb.UsbEndpointBase"></see> item at the specified index.
             </summary>
             <param name="index">The zero-based index of the item.</param>
             <returns>The <see cref="T:LibUsbDotNet.Usb.UsbEndpointBase"></see> item at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:LibUsbDotNet.Usb.Main.UsbEndpointList"></see>.</exception>
        </member>
        <member name="P:LibUsbDotNet.Usb.Main.UsbEndpointList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:LibUsbDotNet.Usb.Main.UsbEndpointList"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:LibUsbDotNet.Usb.Main.UsbEndpointList"></see>.
            </returns>
            
        </member>
        <member name="T:LibUsbDotNet.DeviceNotify.Info.PortNotifyInfo">
            <summary>
            Notify information for a communication port
            </summary>
        </member>
        <member name="M:LibUsbDotNet.DeviceNotify.Info.PortNotifyInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:LibUsbDotNet.DeviceNotify.Info.PortNotifyInfo"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:LibUsbDotNet.DeviceNotify.Info.PortNotifyInfo"></see>.
            </returns>
        </member>
        <member name="P:LibUsbDotNet.DeviceNotify.Info.PortNotifyInfo.Name">
            <summary>
            Gets the name of the port that caused the event.
            </summary>
        </member>
    </members>
</doc>
